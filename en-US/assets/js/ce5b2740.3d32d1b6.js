"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[29559],{21878:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=r(74848),s=r(28453);const o={},d="TuGraph Stored Procedure Guide",i={id:"developer-manual/interface/procedure",title:"TuGraph Stored Procedure Guide",description:"This document describes how to use TuGraph's stored procedures",source:"@site/versions/version-3.5.0/en-US/source/5.developer-manual/6.interface/3.procedure.md",sourceDirName:"5.developer-manual/6.interface",slug:"/developer-manual/interface/procedure",permalink:"/tugraph-db/en-US/en/3.5.0/developer-manual/interface/procedure",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TuGraph Built-in Algorithm Description",permalink:"/tugraph-db/en-US/en/3.5.0/developer-manual/interface/olap/algorithms"},next:{title:"TuGraph RESTful API",permalink:"/tugraph-db/en-US/en/3.5.0/developer-manual/interface/protocol/restful-api"}},a={},l=[{value:"1.Introduction",id:"1introduction",level:2},{value:"2.Guide",id:"2guide",level:2},{value:"3.Write Stored Procedures",id:"3write-stored-procedures",level:2},{value:"3.1.C++",id:"31c",level:3},{value:"3.2.Python",id:"32python",level:3},{value:"4.Install Stored Procedures",id:"4install-stored-procedures",level:2},{value:"5.List Stored Procedures",id:"5list-stored-procedures",level:2},{value:"6.Retrieve Stored Procedures Detail",id:"6retrieve-stored-procedures-detail",level:2},{value:"7.Call Stored Procedures",id:"7call-stored-procedures",level:2},{value:"8.Uninstall Stored Procedures",id:"8uninstall-stored-procedures",level:2},{value:"9.Upgrade Stored Procedures",id:"9upgrade-stored-procedures",level:2},{value:"10.Procedure-api Document",id:"10procedure-api-document",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"tugraph-stored-procedure-guide",children:"TuGraph Stored Procedure Guide"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"This document describes how to use TuGraph's stored procedures"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"1introduction",children:"1.Introduction"}),"\n",(0,t.jsx)(n.p,{children:"When users want to express complex logics of queries or updates (such as those currently not supported by Cypher, or those demanding high performance), using TuGraph stored procedures would be a better choice."}),"\n",(0,t.jsx)(n.p,{children:"Similar to traditional databases, TuGraph's stored procedures run on the server side, and users can reduce the number of calls to the REST interface required by the client by encapsulating the processing logic (that is, multiple operations) into one procedure, and can implement it through parallel Processing methods (such as using the relevant C++ OLAP interface and built-in algorithms based on its implementation) for further acceleration."}),"\n",(0,t.jsx)(n.h2,{id:"2guide",children:"2.Guide"}),"\n",(0,t.jsx)(n.p,{children:"In TuGraph, users can dynamically load, update and delete stored procedures. TuGraph supports stored procedures written in C language and Python language. The extension of the stored procedure written in C language is generally .so (under Linux/Unix system) or .dll (under Windows system). The extension of a Python stored procedure is .py. The two stored procedures are managed separately, but are used in the same way. Users can manage and call stored procedures through RESTful API or RPC. The following description takes the RESTful API as an example, and the corresponding RPC calling method is detailed in the RPC documentation."}),"\n",(0,t.jsx)(n.h2,{id:"3write-stored-procedures",children:"3.Write Stored Procedures"}),"\n",(0,t.jsx)(n.h3,{id:"31c",children:"3.1.C++"}),"\n",(0,t.jsx)(n.p,{children:"The following shows the code of a simple TuGraph C++ stored procedure.\nCalculate the number of outgoing and incoming edges and the sum of the number of incoming and outgoing edges for each node:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-C++",children:'// standard_result.cpp\n#include "lgraph/lgraph_result.h"\n#include "iostream"\n\nusing namespace lgraph_api;\n\nextern "C" LGAPI bool Process(GraphDB &db, const std::string &request, std::string &response) {\n    // defination\n    Result result({{"node", LGraphType::NODE},\n                   {"edge_num_sum", LGraphType::INTEGER},\n                   {"edge_num", LGraphType::MAP}});\n\n    auto txn = db.CreateReadTxn();\n    for (auto vit = txn.GetVertexIterator(); vit.IsValid(); vit.Next()) {\n        auto record = result.MutableRecord();\n        std::map<std::string, FieldData> edge_num_map;\n        record->insert("node", vit);\n\n        int in_num_edges = 0;\n        int out_num_edges = 0;\n\n        for (auto eit = vit.GetOutEdgeIterator(); eit.IsValid(); eit.Next()) out_num_edges += 1;\n        edge_num_map["out_num_edges"] = FieldData(out_num_edges);\n        for (auto eit = vit.GetInEdgeIterator(); eit.IsValid(); eit.Next()) in_num_edges += 1;\n        edge_num_map["in_num_edges"] = FieldData(in_num_edges);\n\n        record->insert("edge_num_sum", FieldData(in_num_edges + out_num_edges));\n\n        record->insert("edge_num", edge_num_map);\n    }\n\n    response = result.Dump();\n    return true;\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The entry of a TuGraph C++ stored procedure is the ",(0,t.jsx)(n.code,{children:"Process"})," function, with three parameters:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"db"}),": the TuGraph database instance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"request"}),": the input data, which can be a binary byte array, or any other format such as JSON string."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"response"}),": the output data, which can be a string or directly return binary data."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Result"})," structure is used in the function. ",(0,t.jsx)(n.code,{children:"Result"})," is the standard output format, which can effectively help you ",(0,t.jsx)(n.strong,{children:"visualize"})," your results.\nYou need to define your return type first, we provide:\n",(0,t.jsx)(n.code,{children:"VOID"}),",\n",(0,t.jsx)(n.code,{children:"INTEGER"}),",\n",(0,t.jsx)(n.code,{children:"FLOAT"}),",\n",(0,t.jsx)(n.code,{children:"DOUBLE"}),",\n",(0,t.jsx)(n.code,{children:"BOOLEAN"}),",\n",(0,t.jsx)(n.code,{children:"STRING"}),",\n",(0,t.jsx)(n.code,{children:"NODE"}),",\n",(0,t.jsx)(n.code,{children:"RELATIONSHIP"}),",\n",(0,t.jsx)(n.code,{children:"PATH"}),",\n",(0,t.jsx)(n.code,{children:"LIST"}),",\n",(0,t.jsx)(n.code,{children:"MAP"}),",\n",(0,t.jsx)(n.code,{children:"FIELD"}),",\n",(0,t.jsx)(n.code,{children:"GRAPH_ELEMENT"}),",\n",(0,t.jsx)(n.code,{children:"COLLECTION"}),",\n",(0,t.jsx)(n.code,{children:"ANY"}),"\nfifteen types."]}),"\n",(0,t.jsxs)(n.p,{children:["Users can use ",(0,t.jsx)(n.code,{children:"Result"})," by three steps."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"define your return type"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-C++",children:'Result result({{"node", LGraphType::NODE},\n                   {"edge_num_sum", LGraphType::INTEGER},\n                   {"edge_num", LGraphType::MAP}});\n'})}),"\n",(0,t.jsxs)(n.p,{children:["We define three return types in demo, ",(0,t.jsx)(n.code,{children:"NODE"}),", ",(0,t.jsx)(n.code,{children:"INTEGER"}),", ",(0,t.jsx)(n.code,{children:"MAP"}),", and corresponding title. 2. initialize ",(0,t.jsx)(n.code,{children:"Record"})," and add element."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-C++",children:'auto record = result->MutableRecord();\n// insert multiple times\nrecord->insert("node", vit);\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Dump"})," your result"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-C++",children:"response = result.Dump();\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Attention"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The return value must be a ",(0,t.jsx)(n.strong,{children:"reference"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Assigning multiple ",(0,t.jsx)(n.code,{children:"Record"})," at the same time may cause partial loss of data."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The return value of ",(0,t.jsx)(n.code,{children:"Process"})," is a boolean value. When it is true, it means the operation succeeds; otherwise it means there exist errors during execution (users may return error information through ",(0,t.jsx)(n.code,{children:"response"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"To build the above stored procedure, you can type the following in shell:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"g++ -fno-gnu-unique -fPIC -g --std=c++14 -I/usr/local/include/lgraph -rdynamic -O3 -fopenmp -o age_10.so age_10.cpp /usr/local/lib64/liblgraph.so -shared\n"})}),"\n",(0,t.jsxs)(n.p,{children:["which should generate an ",(0,t.jsx)(n.code,{children:"age_10.so"})," file."]}),"\n",(0,t.jsx)(n.h3,{id:"32python",children:"3.2.Python"}),"\n",(0,t.jsx)(n.p,{children:"The following snippet does the same thing as the above C++ stored procedure, but via TuGraph Python API:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def Process(db, input):\n    txn = db.CreateReadTxn()\n    it = txn.GetVertexIterator()\n    n = 0\n    while it.IsValid():\n        if it.GetLabel() == 'student' and it['age'] and it['age'] == 10:\n            n = n + 1\n        it.Next()\n    return (True, str(nv))\n"})}),"\n",(0,t.jsx)(n.p,{children:"The return value of TuGraph Python stored procedures is a tuple, consisting of a boolean value indicating whether the operation succeeds, and a string value containing the response data."}),"\n",(0,t.jsx)(n.h2,{id:"4install-stored-procedures",children:"4.Install Stored Procedures"}),"\n",(0,t.jsxs)(n.p,{children:["Users may install plugins with the following Python snippet into the ",(0,t.jsx)(n.code,{children:"school"})," graph (different graphs can have different stored procedures)\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import requests\nimport json\nimport base64\n\ndata = {'name':'age_10'}\nf = open('./age_10.so','rb')\ncontent = f.read()\ndata['code_base64'] = base64.b64encode(content).decode()\ndata['description'] = 'Calculate number of students in the age of 10'\ndata['read_only'] = true\ndata['code_type'] = 'so'\njs = json.dumps(data)\nr = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin', data=js,\n            headers={'Content-Type':'application/json'})\nprint(r.status_code)    # return 200 for normal\n"})}),"\n",(0,t.jsxs)(n.p,{children:["One thing to note is that ",(0,t.jsx)(n.code,{children:"data['code']"})," is a base64-encoded string since the binary content in ",(0,t.jsx)(n.code,{children:"age_10.so"})," may not be transported via JSON directly. In addition, only administrators can manage stored procedures. Normal users can only call or list stored procedures."]}),"\n",(0,t.jsx)(n.p,{children:"Once installed, stored procedures are maintained in the database, so they will be loaded automatically on TuGraph server startup."}),"\n",(0,t.jsxs)(n.p,{children:["Installing Python stored procedures in TuGraph only differs in the URL (i.e. ",(0,t.jsx)(n.code,{children:"http://127.0.0.1:7071/db/school/python_plugin"}),")"]}),"\n",(0,t.jsx)(n.h2,{id:"5list-stored-procedures",children:"5.List Stored Procedures"}),"\n",(0,t.jsxs)(n.p,{children:["The following snippet shows how to list all C++ stored procedures installed in the ",(0,t.jsx)(n.code,{children:"school"})," graph\uff1a"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'>>> r = requests.get(\'http://127.0.0.1:7071/db/school/cpp_plugin\')\n>>> r.status_code\n200\n>>> r.text\n\'{"plugins":[{"description":"Calculate number of students in the age of 10", "name":"age_10", "read_only":true}]}\'\n'})}),"\n",(0,t.jsx)(n.h2,{id:"6retrieve-stored-procedures-detail",children:"6.Retrieve Stored Procedures Detail"}),"\n",(0,t.jsx)(n.p,{children:"The following snippet shows how to one procedure detail, including code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'>>> r = requests.get(\'http://127.0.0.1:7071/db/school/cpp_plugin/age_10\')\n>>> r.status_code\n200\n>>> r.text\n\'{"description":"Calculate number of students in the age of 10", "name":"age_10", "read_only":true, "code_base64":<CODE>, "code_type":"so"}\'\n'})}),"\n",(0,t.jsx)(n.h2,{id:"7call-stored-procedures",children:"7.Call Stored Procedures"}),"\n",(0,t.jsxs)(n.p,{children:["The following snippet shows how to call the ",(0,t.jsx)(n.code,{children:"age_10"})," C++ stored procedure in the ",(0,t.jsx)(n.code,{children:"school"})," graph:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:">>> r = requests.post(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10', data='',\n                headers={'Content-Type':'application/json'})\n>>> r.status_code\n200\n>>> r.text\n9\n"})}),"\n",(0,t.jsx)(n.h2,{id:"8uninstall-stored-procedures",children:"8.Uninstall Stored Procedures"}),"\n",(0,t.jsxs)(n.p,{children:["You can uninstall the ",(0,t.jsx)(n.code,{children:"age_10"})," C++ stored procedure with the following snippet:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:">>> r = requests.delete(url='http://127.0.0.1:7071/db/school/cpp_plugin/age_10')\n>>> r.status_code\n200\n"})}),"\n",(0,t.jsx)(n.p,{children:"Note that only administrators can uninstall stored procedures."}),"\n",(0,t.jsx)(n.h2,{id:"9upgrade-stored-procedures",children:"9.Upgrade Stored Procedures"}),"\n",(0,t.jsx)(n.p,{children:"You can upgrade a stored procedure with the following two steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Uninstall the existing one."}),"\n",(0,t.jsx)(n.li,{children:"Install the new on."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"TuGraph carefully manages the concurrency of stored procedure operations. Upgrading stored procedures will not affect concurrent runs of existing ones."}),"\n",(0,t.jsx)(n.h2,{id:"10procedure-api-document",children:"10.Procedure-api Document"}),"\n",(0,t.jsxs)(n.p,{children:["TuGraph-Python-Procedure-API ",(0,t.jsx)(n.a,{href:"https://tugraph-web-static.oss-cn-beijing.aliyuncs.com/%E6%96%87%E6%A1%A3/procedure-api/3.3.2/TuGraph-Python-Procedure-API.tar.gz",children:"[document download]"})]}),"\n",(0,t.jsxs)(n.p,{children:["TuGraph-CPP-Procedure-API ",(0,t.jsx)(n.a,{href:"https://tugraph-web-static.oss-cn-beijing.aliyuncs.com/%E6%96%87%E6%A1%A3/procedure-api/3.3.2/TuGraph-CPP-Procedure-API.tar.gz",children:"[document download]"})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>i});var t=r(96540);const s={},o=t.createContext(s);function d(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);